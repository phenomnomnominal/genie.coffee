// Generated by CoffeeScript 1.3.3
(function() {
  var Chromosome, Genie, root;

  Chromosome = (function() {

    function Chromosome(genes) {
      this.genes = genes;
    }

    Chromosome.Random = function(numberOfGenes) {
      var genes, n, _i;
      genes = [];
      for (n = _i = 0; 0 <= numberOfGenes ? _i < numberOfGenes : _i > numberOfGenes; n = 0 <= numberOfGenes ? ++_i : --_i) {
        genes[n] = Math.random() * Math.pow(2, 32) - Math.pow(2, 31);
      }
      return new Chromosome(genes);
    };

    Chromosome.Breed = function(parentOne, parentTwo, mutationRate) {
      var gene, genes, n, random, _i, _ref;
      genes = [];
      for (n = _i = 0, _ref = parentOne.genes.length; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
        random = Math.random();
        gene = random < 0.5 ? parentOne.genes[n] : parentTwo.genes[n];
        if (random < mutationRate) {
          gene = Math.random() * Math.pow(2, 32) - Math.pow(2, 31);
        }
        genes[n] = gene;
      }
      return new Chromosome(genes);
    };

    return Chromosome;

  })();

  Genie = (function() {
    var checkOptions, complete, getFitness;

    function Genie() {}

    Genie.prototype.init = function(options, _) {
      var n;
      this._ = _ != null ? _ : {};
      this._.options = checkOptions(options);
      this._.population = (function() {
        var _i, _ref, _results;
        _results = [];
        for (n = _i = 0, _ref = this._.options.populationSize; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
          _results.push(Chromosome.Random(this._.options.numberOfGenes));
        }
        return _results;
      }).call(this);
      this.bestFit = {
        fit: 0
      };
      this.currentChromosomeIndex = 0;
      return this.generation = 0;
    };

    checkOptions = function(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      if ((_ref = options.populationSize) == null) {
        options.populationSize = 32;
      }
      if (!(options.populationSize > 0)) {
        if (options.logging != null) {
          console.warn('Genie - Options Warning: Population size must be greater than 0.');
          console.info('Genie - Setting population size to 32.');
        }
        options.populationSize = 32;
      }
      if ((_ref1 = options.mutationRate) == null) {
        options.mutationRate = 0.1;
      }
      if (!((0 <= (_ref2 = options.mutationRate) && _ref2 <= 1))) {
        if (options.logging != null) {
          console.warn('Genie - Options Warning: Mutation rate must be a probability from 0 to 1');
          console.info('Genie - Setting mutation rate to 0.1.');
        }
        options.mutationRate = 0.1;
      }
      if ((_ref3 = options.survivalRate) == null) {
        options.survivalRate = 0.33;
      }
      if (!((0 <= (_ref4 = options.survivalRate) && _ref4 <= 1))) {
        if (options.logging != null) {
          console.warn('Genie - Options Warning: Survival rate must be a probability from 0 to 1.');
          console.info('Genie - Setting survival rate to 0.33.');
        }
        options.surivalRate = 0.33;
      }
      if (!((options.numberOfGenes != null) && options.numberOfGenes > 0)) {
        throw Error('Genie - Options Error: The number of genes for each Chromosome must be greater than 0.');
      }
      if (!options.evaluateFitness) {
        throw Error('Genie - Options Error: The fitness evalutation function for each Chromosome must be defined.');
      }
      return options;
    };

    Genie.prototype.run = function() {
      this.generation++;
      if (this._.options.logging) {
        console.info("Genie - Starting generation " + this.generation + ".");
      }
      return getFitness.call(this);
    };

    getFitness = function() {
      var getNextChromosome, _ref;
      getNextChromosome = function(population) {
        var c, chromosome, _i, _ref;
        for (c = _i = 0, _ref = population.length; 0 <= _ref ? _i < _ref : _i > _ref; c = 0 <= _ref ? ++_i : --_i) {
          chromosome = population[c];
          if (chromosome.fit == null) {
            return [chromosome, c + 1];
          }
        }
        return [];
      };
      _ref = getNextChromosome(this._.population), this._.currentChromosome = _ref[0], this.currentChromosomeIndex = _ref[1];
      if (this._.currentChromosome != null) {
        if (this._.options.logging) {
          console.info("Genie - Evaluating fitness of chromosome " + this.currentChromosomeIndex + ".");
        }
        return this._.options.evaluateFitness(this._.currentChromosome);
      } else {
        if (this._.options.logging) {
          console.info("Genie - Generation " + this.generation + " complete.");
        }
        return complete.call(this);
      }
    };

    Genie.prototype.reportFitness = function(fitness) {
      this._.currentChromosome.fit = fitness;
      return getFitness.call(this);
    };

    complete = function() {
      var bag, chromosome, getIndex, n, parentOne, parentTwo, populationWeights, _i, _len, _ref;
      this._.population.sort(function(a, b) {
        return b.fit - a.fit;
      });
      if (this._.population[0].fit > this.bestFit.fit) {
        this.bestFit = {
          genes: this._.population[0].genes,
          fit: this._.population[0].fit
        };
        if (this._.options.logging) {
          console.info("Genie - New best fitting chomosome found with fit = " + this.bestFit.fit);
          console.info(this.bestFit);
        }
      }
      this._.population = this._.population.slice(0, Math.floor(this._.population.length * this._.options.survivalRate));
      populationWeights = (function() {
        var _i, _ref, _results;
        _results = [];
        for (n = _i = 1, _ref = this._.population.length; 1 <= _ref ? _i <= _ref : _i >= _ref; n = 1 <= _ref ? ++_i : --_i) {
          _results.push(1 / Math.pow(2, n));
        }
        return _results;
      }).call(this);
      getIndex = function(bag) {
        var random, selected, w, _i, _ref;
        random = Math.random();
        selected = null;
        for (w = _i = 0, _ref = bag.length; 0 <= _ref ? _i < _ref : _i > _ref; w = 0 <= _ref ? ++_i : --_i) {
          if (selected == null) {
            if (random > populationWeights[w]) {
              selected = w;
            }
          }
        }
        return bag.splice(selected, 1)[0];
      };
      while (this._.population.length < this._.options.populationSize) {
        bag = (function() {
          var _i, _ref, _results;
          _results = [];
          for (n = _i = 0, _ref = this._.population.length; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
            _results.push(n);
          }
          return _results;
        }).call(this);
        parentOne = this._.population[getIndex(bag)];
        parentTwo = this._.population[getIndex(bag)];
        this._.population.push(Chromosome.Breed(parentOne, parentTwo, this._.options.mutationRate));
      }
      _ref = this._.population;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chromosome = _ref[_i];
        chromosome.fit = null;
      }
      return this.run();
    };

    return Genie;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Genie = Genie;

}).call(this);
